#!/usr/bin/env lua
-- If the received WAN-IP (first argument) is in the same range as the
-- routers LAN range, then change LAN range.
-- Returns 0 if LAN range is changed.

require("uci")

-- Convert IP string to numbers in a table
local function ip_to_tab(str)
    assert(type(str) == "string", "invalid type: "..type(str).." should be: string")

    local tab = {}
    for d in str:gmatch("%d+") do
        table.insert(tab, assert(tonumber(d)))
    end

    return tab
end

-- Convert table of IP digits to string
local function tab_to_ip(tab)
    assert(type(tab) == "table", "invalid type: "..type(tab).." should be: table")
    assert(#tab == 4)

    return table.concat(tab, ".")
end

-- Return true if the first 3 digits of the IPv4 addresses match
local function same_range(lan, wan)
    assert(type(lan) == "table", "invalid type: "..type(lan).." should be: table")
    assert(type(wan) == "table", "invalid type: "..type(wan).." should be: table")
    assert(#lan == 4)
    assert(#wan == 4)

    local match = 0
    for i=1, 3 do
        if lan[i] == wan[i] then
            match = match + 1
        end
    end

    return match == 3
end

-- Shifts the third digit in the IPv4 address
local function shift(ip)
    assert(type(ip) == "table", "invalid type: "..type(ip).." should be: table")
    assert(#ip == 4)

    if   ip[3] < 254 then return { ip[1], ip[2], ip[3] + 1, ip[4] }
    else                  return { ip[1], ip[2], 1,         ip[4] } end
end

function os.capture(cmd)
    local f = assert(io.popen(cmd, 'r'))
    local s = assert(f:read('*a'))
    f:close()
    return s
end

if #arg > 0 then
    local x = uci.cursor(nil, "/var/state")
    local wan = arg[1]
    local lan = x:get("network", "lan", "ipaddr")

    local t_wan = ip_to_tab(wan)
    local t_lan = ip_to_tab(lan)

    if same_range(t_wan, t_lan) then
        -- collision detected
        local t_new_lan = shift(t_lan)
        local new_lan = tab_to_ip(t_new_lan)

        --x:set("network", "lan", "ipaddr", new_lan)
        --x:commit("network")
        os.capture("uci set network.lan.ipaddr="..new_lan)
        os.capture("uci commit network")
        os.exit(0)
    end
end
os.exit(1)

