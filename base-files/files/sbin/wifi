#!/bin/sh

#exec 2>/dev/null

. /lib/functions.sh
. /usr/share/libubox/jshn.sh

local _VIFNUM=0

RA="/etc/Wireless/RT2860/RT2860.dat"
RAI="/etc/Wireless/iNIC/iNIC_ap.dat"

CONFILE=""

remove_from_networks() {
	local iface=$1
	local ifname=""
	for net in $(uci show network | grep network.*.interface | awk -F'[.,=]' '{print$2}' | tr '\n' ' '); do
		ifname=""
		for ifc in $(uci -q get network.$net.ifname); do
			if [ "$ifc" != "$iface" ]; then
				ifname="$ifname $ifc"
			fi
		done
		uci -q set network.$net.ifname="$(echo $ifname | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/[ \t]*$//')"
		uci commit network
	done
}

add_to_network() {
	local network=$1
	local iface=$2
	local ifname=""
	for net in $(uci show network | grep network.*.interface | awk -F'[.,=]' '{print$2}'); do
		ifname="$(uci -q get network.$net.ifname)"
		if [ "$net" == "$network" ]; then
			ifname="$ifname $iface"
		fi
		uci -q set network.$net.ifname="$(echo $ifname | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/[ \t]*$//')"
	done
	uci commit network
}

find_in_network() {
	local wcfg=$1
	local iface=$2
	#uci -q delete wireless.$wcfg.network
	for net in $(uci show network | grep network.*.interface | awk -F'[.,=]' '{print$2}' | tr '\n' ' '); do
		for ifc in $(uci -q get network.$net.ifname); do
			if [ "$ifc" == "$iface" ]; then
				uci -q set wireless.$wcfg.network="$net"
			fi
		done
	done
}

vif_settings() {
	local cfg=$1
	local iface=$2
	local device ifname ssid encryption key encrtype authmode wpapsk
	local key key1 key2 key3 key4

	find_in_network $cfg $iface

	config_get device $cfg device
	config_get ssid $cfg ssid ""
	config_get encryption $cfg encryption ""

	authmode="OPEN"
	encrtype="NONE"

	case "$encryption" in
		*wep*)
			authmode="WEPAUTO"
			encrtype="WEP"

			config_get key $cfg key "1"
			config_get key1 $cfg key1 ""
			config_get key2 $cfg key2 ""
			config_get key3 $cfg key3 ""
			config_get key4 $cfg key4 ""

			sed -i "s/DefaultKeyID=.*/DefaultKeyID=$key/g" $CONFILE
		;;
		*psk*)
			authmode="WPA2PSK"
			encrtype="AES"

			config_get wpapsk $cfg key ""
		;;
		*wpa*)
			authmode="WPA2"
		;;
	esac

	VNO=$((_VIFNUM + 1 ))

	case "$iface" in
		rai*)
			CONFILE=$RAI
		;;
		ra*)
			CONFILE=$RA
		;;
	esac

	sed -i "s/AuthMode=.*/AuthMode=$authmode/g" $CONFILE
	sed -i "s/EncrypType=.*/EncrypType=$encrtype/g" $CONFILE
	sed -i "s/SSID$VNO=.*/SSID$VNO=$ssid/g" $CONFILE
	sed -i "s/WPAPSK$VNO=.*/WPAPSK$VNO=$wpapsk/g" $CONFILE

	sed -i "s/Key1Type=.*/Key1Type=0/g" $CONFILE
	sed -i "s/Key1Str$VNO=.*/Key1Str$VNO=$key1/g" $CONFILE
	sed -i "s/Key2Type=.*/Key2Type=0/g" $CONFILE
	sed -i "s/Key2Str$VNO=.*/Key2Str$VNO=$key2/g" $CONFILE
	sed -i "s/Key3Type=.*/Key3Type=0/g" $CONFILE
	sed -i "s/Key3Str$VNO=.*/Key3Str$VNO=$key3/g" $CONFILE
	sed -i "s/Key4Type=.*/Key4Type=0/g" $CONFILE
	sed -i "s/Key4Str$VNO=.*/Key4Str$VNO=$key4/g" $CONFILE

	config_get_bool disabled $cfg disabled 0
	if [ "$disabled" == "0" ]; then
		#config_get network $cfg network
		network="$(uci -q get wireless.$cfg.network)"
		network="${network:-lan}"
		[ -n "$network" ] && add_to_network $network $iface
	fi
}

configure_vif() {
	local vif="$1"
	local device iface mbssmac mbssnum
	config_get device "$vif" device

	[ "$2" == "$device" ] || continue

	if [ $_VIFNUM -eq 0 ]; then
		iface="$device"
	else

		ln=$((${#device}-1))
		iface="${device:0:$ln}$_VIFNUM"
	fi

	# set wireless ifname in wireless config
	uci set wireless.$vif.ifname=$iface

	vif_settings $vif $iface

	_VIFNUM=$((_VIFNUM+1))
}

wdev_settings() {
	local cfg=$1
	local device=$cfg
	local country channel radio country_code disabled
	local dfsc beamforming dfsc isac autoch autochskplist

	case "$device" in
		rai*)
			CONFILE=$RAI
			isac=1
			autochskplist="52;56;60;64;100;104;108;112;116;120;124;128;132;136;140"
		;;
		ra*)
			CONFILE=$RA
			isac=0
			autochskplist=""
		;;
	esac

	config_get_bool disabled $cfg disabled 0
	[ "$disabled" == "1" ] && radio=0 || radio=1
	config_get_bool radio $cfg radio $radio

	config_get country $cfg country "SV"
	config_get hwmode $cfg hwmode "auto"
	config_get channel $cfg channel "auto"
	[ "$channel" == "auto" ] && autoch=1 || autoch=0
	config_get dfsc $cfg dfsc "$is_ac"
	[ "$dfsc" == "1" ] && autochskplist=""
	config_get beamforming $cfg beamforming "0"


	country_code=$(echo $country | awk -F'/' '{print$1}')
	country_rev=$(echo $country | awk -F'/' '{print$2}')
	[ "$country_code" == "EU" ] || country_code="DE"

	case $hwmode in
		11ac)
			wirelessmode=15
		;;
		11n)
			wirelessmode=6
		;;
		11a)
			wirelessmode=2
		;;
		11g)
			wirelessmode=4
		;;
		11bg)
			wirelessmode=0
		;;
		11b)
			wirelessmode=1
		;;
		*)
			wirelessmode=15
		;;
	esac

	sed -i "s/BssidNum=.*/BssidNum=4/g" $CONFILE
	sed -i "s/CountryRegion=.*/CountryRegion=1/g" $CONFILE
	sed -i "s/CountryRegionABand=.*/CountryRegionABand=1/g" $CONFILE

	sed -i "s/CountryCode=.*/CountryCode=$country_code/g" $CONFILE
	sed -i "s/RadioOn=.*/RadioOn=$radio/g" $CONFILE
	sed -i "s/Channel=.*/Channel=$channel/g" $CONFILE
	sed -i "s/AutoChannelSelect=.*/AutoChannelSelect=$autoch/g" $CONFILE
	sed -i "s/AutoChannelSkipList=.*/AutoChannelSkipList=$autochskplist/g" $CONFILE
	sed -i "s/WirelessMode=.*/WirelessMode=$wirelessmode/g" $CONFILE
	sed -i "s/DfsEnable=.*/DfsEnable=$isac/g" $CONFILE
	sed -i "s/ITxBfEn=.*/ITxBfEn=$beamforming/g" $CONFILE
}

setup_wifi_device() {
	local device="$1"
	local vif

	# configure virtual wireless interfaces
	config_foreach configure_vif wifi-iface "$device"
	_VIFNUM=0

	wdev_settings $device
}

configure_wifi() {
	config_load wireless
	config_foreach setup_wifi_device wifi-device
	uci commit wireless
}

bring_wifi() {
	local action="$1"
	[ -n "$action" ] || return
	for rif in ra rai; do
		for idx in 0 1 2 3; do
			rxif="$rif$idx"
			if uci show network | grep network.*ifname | tr -d "'" | grep -qw "$rxif"; then
				if [ "$action" == "up" ]; then
					ifconfig $rxif up
				else
					remove_from_networks $rxif
					ifconfig $rxif down
				fi
			fi
		done
	done
}

case "$_ACTION" in
	detect)
		exit
	;;
	disable|enable)
		exit
	;;
	clients)
		if [ -n "$2" ]; then
			ubus call router.wireless stas "{\"vif\":\"$2\"}"
		else
			ubus call router.wireless stas
		fi
		exit
	;;
	down|off)
		for idx in 0 1 2 3; do
			ifconfig ra$idx down
			ifconfig rai$idx down
		done
		exit
	;;
	import)
		exit
	;;
	toggle)
		exit
	;;
	reload|restart|up)
		_RELOAD=1
	;;
esac

bring_wifi down
configure_wifi
bring_wifi up

# trigger network reload
ubus -t 5 call network reload
# re-populate network in questd
ubus -t 5 call router.network reload
