#!/bin/sh

#exec 2>/dev/null

. /lib/functions.sh
. /usr/share/libubox/jshn.sh


local _ACTION=$1
local _VIFNUM=0
local _REPEATER=0
local _DAT=1

RA="/etc/Wireless/RT2860/RT2860.dat"
RAI="/etc/Wireless/iNIC/iNIC_ap.dat"

CONFILE=""

remove_from_networks() {
	local iface=$1
	local ifname=""
	for net in $(uci show network | grep network.*.interface | awk -F'[.,=]' '{print$2}' | tr '\n' ' '); do
		ifname=""
		for ifc in $(uci -q get network.$net.ifname); do
			if [ "$ifc" != "$iface" ]; then
				ifname="$ifname $ifc"
			fi
		done
		uci -q set network.$net.ifname="$(echo $ifname | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/[ \t]*$//')"
		uci commit network
	done
}

add_to_network() {
	local network=$1
	local iface=$2
	local ifname=""
	for net in $(uci show network | grep network.*.interface | awk -F'[.,=]' '{print$2}'); do
		ifname="$(uci -q get network.$net.ifname)"
		if [ "$net" == "$network" ]; then
			ifname="$ifname $iface"
		fi
		uci -q set network.$net.ifname="$(echo $ifname | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/[ \t]*$//')"
	done
	uci commit network
}

find_in_network() {
	local wcfg=$1
	local iface=$2
	#uci -q delete wireless.$wcfg.network
	for net in $(uci show network | grep network.*.interface | awk -F'[.,=]' '{print$2}' | tr '\n' ' '); do
		for ifc in $(uci -q get network.$net.ifname); do
			if [ "$ifc" == "$iface" ]; then
				uci -q set wireless.$wcfg.network="$net"
			fi
		done
	done
}

vif_settings() {
	local cfg=$1
	local iface=$2
	local device ifname ssid encryption key
	local encrtype authmode wpapsk
	local key key1 key2 key3 key4
	local macfilter maclist macmode

	config_get mode $cfg mode

	case "$iface" in
		rai*|apclii*)
			CONFILE=$RAI
		;;
		ra*|apcli*)
			CONFILE=$RA
		;;
	esac

	find_in_network $cfg $iface

	config_get device $cfg device
	config_get ssid $cfg ssid ""
	config_get encryption $cfg encryption ""

	authmode="OPEN"
	encrtype="NONE"

	case "$encryption" in
		*wep*)
			authmode="WEPAUTO"
			encrtype="WEP"

			config_get key $cfg key "1"
			config_get key1 $cfg key1 ""
			config_get key2 $cfg key2 ""
			config_get key3 $cfg key3 ""
			config_get key4 $cfg key4 ""

			sed -i "s/DefaultKeyID=.*/DefaultKeyID=$key/g" $CONFILE
			sed -i "s/ApCliDefaultKeyID=.*/ApCliDefaultKeyID=$key/g" $CONFILE
		;;
		*psk*)
			authmode="WPA2PSK"
			encrtype="AES"

			config_get wpapsk $cfg key ""
		;;
		*wpa*)
			authmode="WPA2"
		;;
	esac

	config_get macfilter $cfg macfilter "0"
	case $macfilter in
		1) macmode=2 ;;
		2) macmode=1 ;;
		*) macmode=0 ;;
	esac
	maclist="$(uci -q get wireless.$cfg.maclist | tr ' ' ';')"

	case "$mode" in
		sta|wet)
			# check if we should touch the .dat file			
			if [ $_DAT == 1 ]; then
				sed -i "s/ApCliEnable=.*/ApCliEnable=1/g" $CONFILE
				sed -i "s/ApCliSsid=.*/ApCliSsid=$ssid/g" $CONFILE
				sed -i "s/ApCliAuthMode=.*/ApCliAuthMode=$authmode/g" $CONFILE
				sed -i "s/ApCliEncrypType=.*/ApCliEncrypType=$encrtype/g" $CONFILE
				sed -i "s/ApCliWPAPSK=.*/ApCliWPAPSK=$wpapsk/g" $CONFILE

				sed -i "s/ApCliKey1Type=.*/ApCliKey1Type=1/g" $CONFILE
				sed -i "s/ApCliKey1Str=.*/ApCliKey1Str=$key1/g" $CONFILE
				sed -i "s/ApCliKey2Type=.*/ApCliKey2Type=1/g" $CONFILE
				sed -i "s/ApCliKey2Str=.*/ApCliKey2Str=$key2/g" $CONFILE
				sed -i "s/ApCliKey3Type=.*/ApCliKey3Type=1/g" $CONFILE
				sed -i "s/ApCliKey3Str=.*/ApCliKey3Str=$key3/g" $CONFILE
				sed -i "s/ApCliKey4Type=.*/ApCliKey4Type=1/g" $CONFILE
				sed -i "s/ApCliKey4Str=.*/ApCliKey4Str=$key4/g" $CONFILE

				sed -i "s/ApCliWPAPSK1=.*/ApCliWPAPSK1=/g" $CONFILE

				sed -i "s/ApCliKey1Str1=.*/ApCliKey1Str1=/g" $CONFILE
				sed -i "s/ApCliKey2Str1=.*/ApCliKey2Str1=/g" $CONFILE
				sed -i "s/ApCliKey3Str1=.*/ApCliKey3Str1=/g" $CONFILE
				sed -i "s/ApCliKey4Str1=.*/ApCliKey4Str1=/g" $CONFILE

				sed -i "s/MACRepeaterEn=.*/MACRepeaterEn=0/g" $CONFILE
				sed -i "s/MACRepeaterOuiMode=.*/MACRepeaterOuiMode=/g" $CONFILE
			fi			
			;;
		*)
			VNO=$((_VIFNUM + 1 ))
			if [ $_DAT == 1 ]; then			
				sed -i "s/ApCliEnable=.*/ApCliEnable=0/g" $CONFILE

				sed -i "s/AuthMode=.*/AuthMode=$authmode/g" $CONFILE
				sed -i "s/EncrypType=.*/EncrypType=$encrtype/g" $CONFILE
				sed -i "s/SSID$VNO=.*/SSID$VNO=$ssid/g" $CONFILE
				sed -i "s/WPAPSK$VNO=.*/WPAPSK$VNO=$wpapsk/g" $CONFILE

				sed -i "s/Key1Type=.*/Key1Type=0/g" $CONFILE
				sed -i "s/Key1Str$VNO=.*/Key1Str$VNO=$key1/g" $CONFILE
				sed -i "s/Key2Type=.*/Key2Type=0/g" $CONFILE
				sed -i "s/Key2Str$VNO=.*/Key2Str$VNO=$key2/g" $CONFILE
				sed -i "s/Key3Type=.*/Key3Type=0/g" $CONFILE
				sed -i "s/Key3Str$VNO=.*/Key3Str$VNO=$key3/g" $CONFILE
				sed -i "s/Key4Type=.*/Key4Type=0/g" $CONFILE
				sed -i "s/Key4Str$VNO=.*/Key4Str$VNO=$key4/g" $CONFILE

				BNO=$((VNO - 1))
				sed -i "s/AccessPolicy$BNO=.*/AccessPolicy$BNO=$macmode/g" $CONFILE
				sed -i "s/AccessControlList$BNO=.*/AccessControlList$BNO=$maclist/g" $CONFILE
			fi
		;;
	esac

	config_get_bool disabled $cfg disabled 0
	if [ "$disabled" == "0" ]; then
		#config_get network $cfg network
		network="$(uci -q get wireless.$cfg.network)"
		network="${network:-lan}"
		[ -n "$network" ] && add_to_network $network $iface
	fi
}

configure_vif() {
	local vif="$1"
	local device iface
	config_get device "$vif" device

	[ "$2" == "$device" ] || continue

	if [ $_VIFNUM -eq 0 ]; then
		iface="$device"
	else

		ln=$((${#device}-1))
		iface="${device:0:$ln}$_VIFNUM"
	fi

	config_get mode "$vif" mode

	case "$device" in
		rai*)
			[ "$mode" == "sta" -o "$mode" == "wet" ] && iface="apclii0"
		;;
		ra*)
			[ "$mode" == "sta" -o "$mode" == "wet" ] && iface="apcli0"
		;;
	esac

	# set wireless ifname in wireless config
	uci set wireless.$vif.ifname=$iface

	vif_settings $vif $iface

	[ "$mode" == "sta" -o "$mode" == "wet" ] || _VIFNUM=$((_VIFNUM+1))
}

wdev_settings() {
	local cfg=$1
	local device=$cfg
	local country channel radio country_code disabled
	local dfsc beamforming dfsc isac autoch autochskplist
	local maxassoc bandwidth bwdef htbw vhtbw bandsteering atf

	case "$device" in
		rai*)
			CONFILE=$RAI
			isac=1
			autochskplist="52;56;60;64;100;104;108;112;116;120;124;128;132;136;140"
		;;
		ra*)
			CONFILE=$RA
			isac=0
			autochskplist=""
		;;
	esac

	config_get_bool disabled $cfg disabled 0
	[ "$disabled" == "1" ] && radio=0 || radio=1
	config_get_bool radio $cfg radio $radio

	config_get country $cfg country ""
	config_get hwmode $cfg hwmode "auto"
	config_get channel $cfg channel "auto"
	[ "$channel" == "auto" ] && autoch=1 || autoch=0
	config_get dfsc $cfg dfsc "$isac"
	[ "$dfsc" == "1" ] && autochskplist=""
	config_get beamforming $cfg beamforming "1"
	config_get maxassoc $cfg maxassoc "32"
	config_get atf $cfg atf "0"

	[ "$isac" == "1" ] && bwdef="80" || bwdef="20"
	config_get bandwidth $cfg bandwidth "$bwdef"

	htbw=0
	vhtbw=0
	case "$bandwidth" in
		80)
			htbw=1
			[ "$isac" == "1" ] && vhtbw=1
		;;
		40)
			htbw=1
			vhtbw=0
		;;
	esac

	country_code=$(echo $country | awk -F'/' '{print$1}')
	country_rev=$(echo $country | awk -F'/' '{print$2}')
	[ "$country_code" == "EU" ] && country_code="DE"

	case $hwmode in
		11ac)
			wirelessmode=15
		;;
		11n)
			wirelessmode=6
		;;
		11a)
			wirelessmode=2
		;;
		11g)
			wirelessmode=4
		;;
		11bg)
			wirelessmode=0
		;;
		11b)
			wirelessmode=1
		;;
		*)
			[ "$isac" == "1" ] && wirelessmode=15 || wirelessmode=9
		;;
	esac

	if [ $_DAT == 1 ]; then
		sed -i "s/BssidNum=.*/BssidNum=$_VIFNUM/g" $CONFILE
		if [ ! -z $country_code ]; then
			sed -i "s/CountryRegion=.*/CountryRegion=1/g" $CONFILE
			sed -i "s/CountryRegionABand=.*/CountryRegionABand=1/g" $CONFILE
		fi
		sed -i "s/CountryCode=.*/CountryCode=$country_code/g" $CONFILE
		sed -i "s/RadioOn=.*/RadioOn=$radio/g" $CONFILE
		sed -i "s/Channel=.*/Channel=$channel/g" $CONFILE
		sed -i "s/AutoChannelSelect=.*/AutoChannelSelect=$autoch/g" $CONFILE
		sed -i "s/AutoChannelSkipList=.*/AutoChannelSkipList=$autochskplist/g" $CONFILE
		sed -i "s/WirelessMode=.*/WirelessMode=$wirelessmode/g" $CONFILE
		sed -i "s/DfsEnable=.*/DfsEnable=$isac/g" $CONFILE
		sed -i "s/ITxBfEn=.*/ITxBfEn=$beamforming/g" $CONFILE
		sed -i "s/MaxStaNum=.*/MaxStaNum=$maxassoc/g" $CONFILE
		sed -i "s/HT_BW=.*/HT_BW=$htbw/g" $CONFILE
		sed -i "s/VHT_BW=.*/VHT_BW=$vhtbw/g" $CONFILE
		sed -i "s/VOW_Airtime_Fairness_En=.*/VOW_Airtime_Fairness_En=$atf/g" $CONFILE

		sed -i "s/IgmpSnEnable=.*/IgmpSnEnable=1/g" $CONFILE

		#sed -i "s/ApCliWirelessMode=.*/ApCliWirelessMode=$wirelessmode/g" $CONFILE

		config_get bandsteering bandsteering enabled "0"
		sed -i "s/BandSteering=.*/BandSteering=$bandsteering/g" $CONFILE
	fi
}

setup_wifi_device() {
	local device="$1"
	local vif

	# configure virtual wireless interfaces
	config_foreach configure_vif wifi-iface "$device"
	wdev_settings $device
	_VIFNUM=0
}

configure_wifi() {
	config_load wireless
	config_foreach setup_wifi_device wifi-device
	uci commit wireless
}

bring_wifi() {
	local action="$1"
	[ -n "$action" ] || return
	local disabled=0
	for rif in ra rai apcli apclii; do
		for idx in 0 1 2 3; do
			rxif="$rif$idx"
			if uci show network | grep network.*ifname | tr -d "'" | grep -qw "$rxif"; then
				if [ "$action" == "up" ]; then
					disabled=$(uci -q get wireless.$(uci -q get wireless.$(uci show wireless | grep "ifname=.*$rxif.*" | cut -d'.' -f2).device).disabled)
					[ "$disabled" == "1" ] || ifconfig $rxif up 2>/dev/null
				else
					remove_from_networks $rxif
					ifconfig $rxif down 2>/dev/null
				fi
			fi
		done
	done
}

add_missing_sections() {
	if ! uci -q get wireless.status; then
		[ -f /etc/config/wireless ] || touch /etc/config/wireless
		uci -q add wireless wifi-status
		uci -q rename wireless.@wifi-status[-1]=status
		uci -q set wireless.status.wlan=1
		uci -q set wireless.status.wps=1
		uci -q set wireless.status.schedule=0
		uci -q set wireless.status.sched_status=0
		uci -q commit wireless
	fi

	if ! uci -q get wireless.bandsteering; then
		bstr=0
		[ -f /etc/config/wireless ] || touch /etc/config/wireless && {
			bstr="$(uci -q get wireless.status.bandsteering)"
			bstr=${bstr:-0}
			uci -q delete wireless.status.bandsteering
		}

		uci -q add wireless bandsteering
		uci -q rename wireless.@bandsteering[-1]=bandsteering
		uci -q set wireless.bandsteering.enabled=$bstr
		uci -q set wireless.bandsteering.policy=0
		uci -q commit wireless
	fi
}

convert_macros() {
	local BMAC=$(db -q get hw.board.BaseMacAddr | tr -d ':')
	local MAC=$(printf "%X\n" $((0x$BMAC)))
	local BSSID=$(printf "%X\n" $((0x$BMAC + 2)))
	local WPAKEY="$(db get hw.board.wpaKey 2>/dev/null)"

	local bssid=$BSSID
	local bssid2=$(echo -n $BSSID | tail -c 2)
	local bssid4=$(echo -n $BSSID | tail -c 4)
	local bssid6=$(echo -n $BSSID | tail -c 6)
	local wpakey="${WPAKEY:-00000000}"

	grep -q "\$BSSID6" /etc/config/wireless && sed -i "s/\$BSSID6/$bssid6/g" /etc/config/wireless
	grep -q "\$BSSID4" /etc/config/wireless && sed -i "s/\$BSSID4/$bssid4/g" /etc/config/wireless
	grep -q "\$BSSID2" /etc/config/wireless && sed -i "s/\$BSSID2/$bssid2/g" /etc/config/wireless
	grep -q "\$BSSID" /etc/config/wireless && sed -i "s/\$BSSID/$bssid/g" /etc/config/wireless
	grep -q "\$WPAKEY" /etc/config/wireless && sed -i "s/\$WPAKEY/$wpakey/g" /etc/config/wireless
}

wifi_import_settings()
{
	local ssid key autoconf newssid newkey
	local newenc newcipher authmode encrtype
	local changed=0
	local clientmode=0
	local wetnet=

	json_load "$1"
	json_get_var newssid ssid
	json_get_var newkey key

	if [ -n "$newkey" ]; then
		authmode="WPA2PSK"
		encrtype="AES"
		newenc="psk2"
		newcipher="ccmp"
	else
		authmode="OPEN"
		encrtype="NONE"
		newenc=""
		newcipher=""
	fi

	vif_update_settings() {
		config_get ssid "$1" ssid
		config_get key "$1" key
		config_get mode "$1" mode "ap"
		config_get autoconf "$1" autoconf "1"
		config_get ifname "$1" ifname

		[ "$autoconf" == "1" ] || return

		case "$ifname" in
			rai*|apclii*)
				CONFILE=$RAI
			;;
			ra*|apcli*)
				CONFILE=$RA
			;;
		esac

		sed -i "s/AuthMode=.*/AuthMode=$authmode/g" $CONFILE
		sed -i "s/EncrypType=.*/EncrypType=$encrtype/g" $CONFILE
		sed -i "s/SSID1=.*/SSID1=$newssid/g" $CONFILE
		sed -i "s/WPAPSK1=.*/WPAPSK1=$newkey/g" $CONFILE

		uci -q set wireless.$1.ssid="$newssid"
		iwpriv $ifname set SSID="$newssid"
		uci -q set wireless.$1.key="$newkey"
		iwpriv $ifname set WPAPSK="$newkey"
		uci -q set wireless.$1.encryption="$newenc"
		iwpriv $ifname set AuthMode="$authmode"
		uci -q set wireless.$1.cipher="$newcipher"
		iwpriv $ifname set EncrypType="$encrtype"

		[ "$mode" == "sta" -o "$mode" == "wet" ] && {
			clientmode=1

			#config_get wetnet "$1" network

			sed -i "s/ApCliEnable=.*/ApCliEnable=1/g" $CONFILE
			sed -i "s/ApCliSsid=.*/ApCliSsid=$newssid/g" $CONFILE
			sed -i "s/ApCliAuthMode=.*/ApCliAuthMode=$authmode/g" $CONFILE
			sed -i "s/ApCliEncrypType=.*/ApCliEncrypType=$encrtype/g" $CONFILE
			sed -i "s/ApCliWPAPSK=.*/ApCliWPAPSK=$newkey/g" $CONFILE

			iwpriv $ifname set ApCliEnable=0
			iwpriv $ifname set ApCliSsid="$newssid"
			iwpriv $ifname set ApCliAuthMode="$authmode"
			iwpriv $ifname set ApCliEncrypType="$encrtype"
			iwpriv $ifname set ApCliWPAPSK="$newkey"
			iwpriv $ifname set ApCliEnable=1
			#iwpriv $ifname set ApCliAutoConnect=1
		}
	}

	config_load wireless
	config_foreach vif_update_settings wifi-iface
	uci commit wireless
#	if [ $clientmode -eq 1 ]; then
#		ifup $wetnet &
#		exit
#	fi
}

band_steering() {
	local enabled policy
	local rssi_threshold bw_util

	iwpriv ra0 set BndStrgEnable=0 2>/dev/null
	iwpriv rai0 set BndStrgEnable=0

	enabled="$(uci -q get wireless.bandsteering.enabled)"

	[ "$enabled" == "1" ] || return 1

	policy="$(uci -q get wireless.bandsteering.policy)"
	policy=${policy:-0}
	rssi_threshold="$(uci -q get wireless.bandsteering.rssi_threshold)"
	rssi_threshold=${rssi_threshold:--75}
	bw_util="$(uci -q get wireless.bandsteering.bw_util)"
	bw_util=${bw_util:--60}

	iwpriv ra0 set BndStrgEnable=1
	iwpriv rai0 set BndStrgEnable=1

	if [ "$policy" == "0" ]; then
		iwpriv ra0 set BndStrgRssiLow=-100
		iwpriv rai0 set BndStrgRssiLow=$rssi_threshold
	fi
}

case "$_ACTION" in
	detect)
		#add_missing_sections
		convert_macros
		exit
	;;
	disable|enable)
		exit
	;;
	clients)
		if [ -n "$2" ]; then
			ubus call router.wireless stas "{\"vif\":\"$2\"}"
		else
			ubus call router.wireless stas
		fi
		exit
	;;
	down|off)
		for idx in 0 1 2 3; do
			ifconfig ra$idx down 2>/dev/null
			ifconfig apcli$idx down 2>/dev/null
			ifconfig rai$idx down 2>/dev/null
			ifconfig apclii$idx down 2>/dev/null
		done
		exit
	;;
	import)
		wifi_import_settings "$2"
		if [ "$3" == "reload" ]; then
			ubus call network reload
			_RELOAD=1
			_DAT=0
		else
			exit
		fi
	;;
	toggle)
		exit
	;;
	reload|restart|up)
		_RELOAD=1
		if [ "$2" == "nodat" ]; then
			_DAT=0
		fi
	;;
esac

if uci show wireless | grep -q 'mode=.*wet.*'; then
	# open a tcp socket and wait for
	# master AP to push new configuration
	killall -15 wificontrol >/dev/null 2>&1
	killall -15 wificontrol >/dev/null 2>&1
	sleep 1
	wificontrol -s &
else
	killall -9 wificontrol >/dev/null 2>&1
	# configure connected repeaters/extenders
	ssid="$(uci -q get wireless.@wifi-iface[0].ssid)"
	key="$(uci -q get wireless.@wifi-iface[0].key)"
	json_load "$(ubus call router.network clients)"
	_cno=1
	while json_select client-$_cno; do
		json_get_var assoclist assoclist
		json_get_var connected connected
		if [ -n "$assoclist" -a "$connected" == "1" ]; then
			json_get_var ipaddr ipaddr
			[ -n "$ipaddr" ] && wificontrol "$ipaddr" "$ssid" "$key"
		fi
		json_select ..
		_cno=$((_cno+1))
	done
fi

convert_macros
bring_wifi down
configure_wifi
bring_wifi up

band_steering

# register rlt_wifi with hw_nat module
iwpriv rai0 set hw_nat_register=1

# trigger network reload
ubus -t 5 call network reload
# re-populate network in questd
ubus -t 5 call router.network reload

setup_client_mode() {
	local cfg="$1"
	local mode ifname ssid
	local encryption key wpapsk

	config_get mode $cfg mode ap
	[ "$mode" == "sta" -o "$mode" == "wet" ] && _REPEATER=1 || return

	config_get ifname $cfg ifname
	config_get ssid $cfg ssid
	config_get encryption $cfg encryption
	config_get key $cfg key

	authmode="OPEN"
	encrtype="NONE"

	case "$encryption" in
		*psk*)
			authmode="WPA2PSK"
			encrtype="AES"

			config_get wpapsk $cfg key ""
		;;
		*wpa*)
			authmode="WPA2"
		;;
	esac

	iwpriv $ifname set ApCliEnable=0
	iwpriv $ifname set ApCliSsid="$ssid"
	iwpriv $ifname set ApCliAuthMode="$authmode"
	iwpriv $ifname set ApCliEncrypType="$encrtype"
	iwpriv $ifname set ApCliWPAPSK="$wpapsk"
	iwpriv $ifname set ApCliEnable=1
	iwpriv $ifname set ApCliAutoConnect=1 2>/dev/null
}

config_load wireless
config_foreach setup_client_mode wifi-iface

[ "$(uci -q get wireless.ra0.disabled)"  == "1" ] && ubus call led.wifi_2g set '{"state":"off"}' || ubus call led.wifi_2g set '{"state":"ok"}'
[ "$(uci -q get wireless.rai0.disabled)" == "1" ] && ubus call led.wifi_5g set '{"state":"off"}' || ubus call led.wifi_5g set '{"state":"ok"}'
