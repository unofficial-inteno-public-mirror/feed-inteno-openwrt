diff --git a/networking/udhcp/common.c b/networking/udhcp/common.c
index bc41c8d..9b79cf7 100644
--- a/networking/udhcp/common.c
+++ b/networking/udhcp/common.c
@@ -23,7 +23,7 @@ const struct dhcp_optflag dhcp_optflags[] = {
 	{ OPTION_IP                   | OPTION_REQ, 0x01 }, /* DHCP_SUBNET        */
 	{ OPTION_S32                              , 0x02 }, /* DHCP_TIME_OFFSET   */
 	{ OPTION_IP | OPTION_LIST     | OPTION_REQ, 0x03 }, /* DHCP_ROUTER        */
-//	{ OPTION_IP | OPTION_LIST                 , 0x04 }, /* DHCP_TIME_SERVER   */
+	{ OPTION_IP | OPTION_LIST                 , 0x04 }, /* DHCP_TIME_SERVER   */
 //	{ OPTION_IP | OPTION_LIST                 , 0x05 }, /* DHCP_NAME_SERVER   */
 	{ OPTION_IP | OPTION_LIST     | OPTION_REQ, 0x06 }, /* DHCP_DNS_SERVER    */
 //	{ OPTION_IP | OPTION_LIST                 , 0x07 }, /* DHCP_LOG_SERVER    */
@@ -49,8 +49,9 @@ const struct dhcp_optflag dhcp_optflags[] = {
 	{ OPTION_IP                               , 0x36 }, /* DHCP_SERVER_ID     */
 	{ OPTION_STRING                           , 0x38 }, /* DHCP_ERR_MESSAGE   */
 //TODO: must be combined with 'sname' and 'file' handling:
-	{ OPTION_STRING_HOST                      , 0x42 }, /* DHCP_TFTP_SERVER_NAME */
-	{ OPTION_STRING                           , 0x43 }, /* DHCP_BOOT_FILE     */
+	{ OPTION_OPTION43                         , 0x2b }, /* Option 43 Vendor Specific Information */
+	{ OPTION_STRING                           , 0x42 }, /* DHCP_TFTP_SERVER_NAME */
+	{ OPTION_STRING                           , 0x43 }, /* DHCP_BOOT_FILE */
 //TODO: not a string, but a set of LASCII strings:
 //	{ OPTION_STRING                           , 0x4D }, /* DHCP_USER_CLASS    */
 #if ENABLE_FEATURE_UDHCP_RFC3397
@@ -58,13 +59,15 @@ const struct dhcp_optflag dhcp_optflags[] = {
 	{ OPTION_SIP_SERVERS                      , 0x78 }, /* DHCP_SIP_SERVERS   */
 #endif
 	{ OPTION_STATIC_ROUTES | OPTION_LIST      , 0x79 }, /* DHCP_STATIC_ROUTES */
+	{ OPTION_STRING                           , 0x80 }, /* TFTP Server IP address. Will be a HTTP URL in IUP */
 #if ENABLE_FEATURE_UDHCP_8021Q
-	{ OPTION_U16                              , 0x84 }, /* DHCP_VLAN_ID       */
-	{ OPTION_U8                               , 0x85 }, /* DHCP_VLAN_PRIORITY */
+	{ OPTION_STRING                           , 0x84 }, /* DHCP_VLAN_ID       */
+	{ OPTION_STRING                           , 0x85 }, /* DHCP_VLAN_PRIORITY */
 #endif
 	{ OPTION_STRING                           , 0xd1 }, /* DHCP_PXE_CONF_FILE */
 	{ OPTION_STRING                           , 0xd2 }, /* DHCP_PXE_PATH_PREFIX */
-	{ OPTION_6RD                              , 0xd4 }, /* DHCP_6RD           */
+	{ OPTION_6RD | OPTION_REQ                 , 0xd4 }, /* DHCP_6RD           */
+	{ OPTION_STRING                           , 0xf1 }, /* Option 241 private option */
 	{ OPTION_STATIC_ROUTES | OPTION_LIST      , 0xf9 }, /* DHCP_MS_STATIC_ROUTES */
 	{ OPTION_STRING                           , 0xfc }, /* DHCP_WPAD          */
 
@@ -94,7 +97,7 @@ const char dhcp_option_strings[] ALIGN1 =
 	"subnet" "\0"      /* DHCP_SUBNET         */
 	"timezone" "\0"    /* DHCP_TIME_OFFSET    */
 	"router" "\0"      /* DHCP_ROUTER         */
-//	"timesrv" "\0"     /* DHCP_TIME_SERVER    */
+	"timesrv" "\0"     /* DHCP_TIME_SERVER    */
 //	"namesrv" "\0"     /* DHCP_NAME_SERVER    */
 	"dns" "\0"         /* DHCP_DNS_SERVER     */
 //	"logsrv" "\0"      /* DHCP_LOG_SERVER     */
@@ -116,6 +119,7 @@ const char dhcp_option_strings[] ALIGN1 =
 	"lease" "\0"       /* DHCP_LEASE_TIME     */
 	"serverid" "\0"    /* DHCP_SERVER_ID      */
 	"message" "\0"     /* DHCP_ERR_MESSAGE    */
+	"vendorspecinf" "\0" /* Option 43 Vendor Specific Information*/
 	"tftp" "\0"        /* DHCP_TFTP_SERVER_NAME */
 	"bootfile" "\0"    /* DHCP_BOOT_FILE      */
 //	"userclass" "\0"   /* DHCP_USER_CLASS     */
@@ -126,6 +130,7 @@ const char dhcp_option_strings[] ALIGN1 =
 	"sipsrv" "\0"      /* DHCP_SIP_SERVERS    */
 #endif
 	"staticroutes" "\0"/* DHCP_STATIC_ROUTES  */
+	"httpurl128" "\0"  /* TFTP Server IP address. Will be a HTTP URL in IUP */
 #if ENABLE_FEATURE_UDHCP_8021Q
 	"vlanid" "\0"      /* DHCP_VLAN_ID        */
 	"vlanpriority" "\0"/* DHCP_VLAN_PRIORITY  */
@@ -133,6 +138,7 @@ const char dhcp_option_strings[] ALIGN1 =
 	"pxeconffile" "\0" /* DHCP_PXE_CONF_FILE  */
 	"pxepathprefix" "\0" /* DHCP_PXE_PATH_PREFIX  */
 	"ip6rd" "\0"       /* DHCP_6RD            */
+	"privopt241" "\0"  /* Option 241 private option */
 	"msstaticroutes""\0"/* DHCP_MS_STATIC_ROUTES */
 	"wpad" "\0"        /* DHCP_WPAD           */
 	;
@@ -149,6 +155,7 @@ const uint8_t dhcp_option_lengths[] ALIGN1 = {
 	[OPTION_IP] =      4,
 	[OPTION_IP_PAIR] = 8,
 //	[OPTION_BOOLEAN] = 1,
+	[OPTION_OPTION43] = 1,
 	[OPTION_STRING] =  1,  /* ignored by udhcp_str2optset */
 	[OPTION_STRING_HOST] = 1,  /* ignored by udhcp_str2optset */
 #if ENABLE_FEATURE_UDHCP_RFC3397
diff --git a/networking/udhcp/common.h b/networking/udhcp/common.h
index d20659e..748d11f 100644
--- a/networking/udhcp/common.h
+++ b/networking/udhcp/common.h
@@ -82,6 +82,7 @@ enum {
 	OPTION_STRING,
 	/* Opts of STRING_HOST type will be sanitized before they are passed
 	 * to udhcpc script's environment: */
+	OPTION_OPTION43,
 	OPTION_STRING_HOST,
 //	OPTION_BOOLEAN,
 	OPTION_U8,
diff --git a/networking/udhcp/dhcpc.c b/networking/udhcp/dhcpc.c
index 4f65217..391b466 100644
--- a/networking/udhcp/dhcpc.c
+++ b/networking/udhcp/dhcpc.c
@@ -201,7 +201,7 @@ static int good_hostname(const char *name)
 static NOINLINE char *xmalloc_optname_optval(uint8_t *option, const struct dhcp_optflag *optflag, const char *opt_name)
 {
 	unsigned upper_length;
-	int len, type, optlen;
+	int len, type, optlen, dynlen;
 	char *dest, *ret;
 
 	/* option points to OPT_DATA, need to go back to get OPT_LEN */
@@ -244,6 +244,38 @@ static NOINLINE char *xmalloc_optname_optval(uint8_t *option, const struct dhcp_
 			dest += sprintf(dest, type == OPTION_U32 ? "%lu" : "%ld", (unsigned long) ntohl(val_u32));
 			break;
 		}
+		case OPTION_OPTION43: {
+			//check if its a vendor "Encapsulated vendor-specific options" if not jump to normal string handling
+			if(*(option)=='\x01') {
+				/*  When encapsulated vendor-specific extensions are used, the
+				information bytes 1-n have the following format:
+
+				* Code   Len   Data item        Code   Len   Data item       Code
+				* +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
+				* |  T1 |  n  |  d1 |  d2 | ... |  T2 |  n  |  D1 |  D2 | ... | ... |
+				* +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
+				*/
+
+				dynlen=0;
+				while(dynlen<len) {
+					dynlen+=*(option+1);
+					option+=2;
+					dynlen+=2;
+					memcpy(dest, option, *(option-1));
+					dest+=*(option-1);
+					option+=*(option-1);
+					//check that we have some vendor strings left
+					if(dynlen<len) {
+						dest += sprintf(dest, ",");
+					}
+					//else add end tag
+					else {
+						dest +=sprintf(dest, "%c",'\0');
+					}
+				}
+			}
+			return ret;	 /* Short circuit this case */
+		}
 		/* Note: options which use 'return' instead of 'break'
 		 * (for example, OPTION_STRING) skip the code which handles
 		 * the case of list of options.
