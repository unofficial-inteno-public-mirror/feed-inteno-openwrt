diff --git a/src/dhcpv6.c b/src/dhcpv6.c
index cfa3f29..09b8163 100644
--- a/src/dhcpv6.c
+++ b/src/dhcpv6.c
@@ -163,6 +163,7 @@ int init_dhcpv6(const char *ifname, unsigned int options, int sol_timeout)
 	// Create ORO
 	if (!(client_options & DHCPV6_STRICT_OPTIONS)) {
 		uint16_t oro[] = {
+			htons(DHCPV6_OPT_DHCP4_O_DHCP6_SERVER),
 			htons(DHCPV6_OPT_SIP_SERVER_D),
 			htons(DHCPV6_OPT_SIP_SERVER_A),
 			htons(DHCPV6_OPT_DNS_SERVERS),
@@ -829,6 +830,9 @@ static int dhcpv6_handle_advert(enum dhcpv6_msg orig, const int rc,
 				if (otype == DHCPV6_OPT_IA_ADDR &&
 						olen >= -4 + sizeof(struct dhcpv6_ia_addr))
 					have_na = true;
+		} else if (otype == DHCPV6_OPT_DHCP4_O_DHCP6_SERVER) {
+			if (olen % 16 == 0)
+				odhcp6c_add_state(STATE_DHCP4O6_SERVERS, odata, olen);
 		}
 	}
 
@@ -935,6 +939,7 @@ static int dhcpv6_handle_reply(enum dhcpv6_msg orig, _unused const int rc,
 		odhcp6c_clear_state(STATE_SIP_IP);
 		odhcp6c_clear_state(STATE_SIP_FQDN);
 		odhcp6c_clear_state(STATE_AFTR_NAME);
+		odhcp6c_clear_state(STATE_DHCP4O6_SERVERS);
 		odhcp6c_clear_state(STATE_CER);
 		odhcp6c_clear_state(STATE_S46_MAPT);
 		odhcp6c_clear_state(STATE_S46_MAPE);
@@ -999,6 +1004,10 @@ static int dhcpv6_handle_reply(enum dhcpv6_msg orig, _unused const int rc,
 			else if (otype == DHCPV6_OPT_DNS_SERVERS) {
 				if (olen % 16 == 0)
 					odhcp6c_add_state(STATE_DNS, odata, olen);
+			} else if (otype == DHCPV6_OPT_DHCP4_O_DHCP6_SERVER) {
+				if (olen % 16 == 0)
+					odhcp6c_add_state(STATE_DHCP4O6_SERVERS, odata, olen);
+
 			} else if (otype == DHCPV6_OPT_DNS_DOMAIN) {
 				odhcp6c_add_state(STATE_SEARCH, odata, olen);
 			} else if (otype == DHCPV6_OPT_SNTP_SERVERS) {
diff --git a/src/odhcp6c.h b/src/odhcp6c.h
index d202790..f97e661 100644
--- a/src/odhcp6c.h
+++ b/src/odhcp6c.h
@@ -65,6 +65,7 @@ enum dhcvp6_opt {
 	DHCPV6_OPT_PD_EXCLUDE = 67,
 	DHCPV6_OPT_SOL_MAX_RT = 82,
 	DHCPV6_OPT_INF_MAX_RT = 83,
+	DHCPV6_OPT_DHCP4_O_DHCP6_SERVER = 99,
 #ifdef EXT_CER_ID
 	/* draft-donley-dhc-cer-id-option-03 */
 	DHCPV6_OPT_CER_ID = EXT_CER_ID,
@@ -259,6 +260,7 @@ enum odhcp6c_state {
 	STATE_AFTR_NAME,
 	STATE_VENDORCLASS,
 	STATE_USERCLASS,
+	STATE_DHCP4O6_SERVERS,
 	STATE_CER,
 	STATE_S46_MAPT,
 	STATE_S46_MAPE,
diff --git a/src/script.c b/src/script.c
index 3d313cf..be4e160 100644
--- a/src/script.c
+++ b/src/script.c
@@ -370,7 +370,7 @@ void script_call(const char *status, int delay, bool resume)
 		if (!resume)
 			action[0] = 0;
 	} else if (pid == 0) {
-		size_t dns_len, search_len, custom_len, sntp_ip_len, ntp_ip_len, ntp_dns_len;
+		size_t dns_len, search_len, custom_len, sntp_ip_len, ntp_ip_len, ntp_dns_len, fos_len;
 		size_t sip_ip_len, sip_fqdn_len, aftr_name_len, cer_len, addr_len;
 		size_t s46_mapt_len, s46_mape_len, s46_lw_len, passthru_len;
 
@@ -382,6 +382,7 @@ void script_call(const char *status, int delay, bool resume)
 
 		struct in6_addr *addr = odhcp6c_get_state(STATE_SERVER_ADDR, &addr_len);
 		struct in6_addr *dns = odhcp6c_get_state(STATE_DNS, &dns_len);
+		struct in6_addr *fos = odhcp6c_get_state(STATE_DHCP4O6_SERVERS, &fos_len);
 		uint8_t *search = odhcp6c_get_state(STATE_SEARCH, &search_len);
 		uint8_t *custom = odhcp6c_get_state(STATE_CUSTOM_OPTS, &custom_len);
 		struct in6_addr *sntp = odhcp6c_get_state(STATE_SNTP_IP, &sntp_ip_len);
@@ -409,6 +410,7 @@ void script_call(const char *status, int delay, bool resume)
 		ipv6_to_env("RDNSS", dns, dns_len / sizeof(*dns));
 		ipv6_to_env("SNTP_IP", sntp, sntp_ip_len / sizeof(*sntp));
 		ipv6_to_env("NTP_IP", ntp, ntp_ip_len / sizeof(*ntp));
+		ipv6_to_env("DHCP4_O_DHCP6_SERVERS", fos, fos_len / sizeof(*fos));
 		fqdn_to_env("NTP_FQDN", ntp_dns, ntp_dns_len);
 		ipv6_to_env("SIP_IP", sip, sip_ip_len / sizeof(*sip));
 		fqdn_to_env("DOMAINS", search, search_len);
